openssl req -new -newkey rsa:1024 -nodes -keyout key.pem -out req.pem
# self signed
openssl req -x509 -days 365 -nodes -newkey rsa:1024 -keyout key.pem -out cert.pem
openssl s_client -connect www.baidu.com:443 -showcerts
# checkout private key
openssl rsa -in key.pem -check
# view a cert info
openssl x509 -in cert.pem -text -noout
# view a remote site's cert
echo | openssl s_client -servername www.baidu.com -connect www.baidu.com:443 2>/dev/null | openssl x509 -text
# download a remote site's cert to local file
openssl s_client -showcerts -connect www.baidu.com:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >mycertfile.pem

# certificate digital signature is used to verify a message,it is basically an encrypt hash of the message,hte recipient
# can check if the message was tampered by hashing the received message and comparing this value with the decrypted signature.
# to decrypt the signature,the corresponding public key is required.

# digest(message)+encrypt with the sender's private key => message digital signature (sender side)
# receiver get message+digital signature
# decrypt message use receiver's private key and then calculate the message digest,
# decrypt the signature with sender's public key and compare.

# a certificate's fingerprint is the unique identifier of the certificate

# Extracting SHA1 Fingerprint of SSL Certificate(-sha256,-md5)
openssl x509 -noout -fingerprint -sha1 -inform pem -in ./cert.pem

# use java keytool to generate a self signed certificate
keytool -genkeypair -alias tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650

# checkout the content of the keystore
keytool -list -v -keystore keystore.jks
keytool -list -v -storetype pkcs12 -keystore keystore.p12

# use an existing ssl certificate
keytool -import -alias tomcat -file myCertificate.crt -keystore keystore.p12 -storepass password

# start ssh
sudo /etc/init.d/ssh start[restart][stop] # or sudo systemctl start ssh
# ssh config file
ssh
nano /etc/ssh/sshd_config
# create ssh keys:
ssh-key-gen -t rsa
# transfer you public key to the server
ssh-copy-id remote_host key.pub
# cron task
nano /etc/crontab
# sftp
sftp name@hostname
# lls,put,get,etc
> help

# download file via ssh
scp -P 21098 /home/localuser/site/example.html cpanel_user@servername:/home/cpanel_user/public_html



===============================================curl=====================================================================
curl [OPTIONS] [URL...]
URL syntax:
     http://site.{one,two,three}.com
     ftp://ftp.example.com/file[1-100].txt
     ftp://ftp.example.com/file[001-100].txt
     ftp://ftp.example.com/file[a-z].txt
     http://example.com/file[1-100:10].txt
     http://example.com/file[a-z:2].txt

options:
    -K,--config <file>:
        Specify a text file to read curl arguments from. The command line arguments found in the text file will be used as if they were provided on the command line.
    --compressed:
        (HTTP) Request a compressed response using one of the algorithms curl supports, and save the uncompressed document.
    -b,--cookie <name=data>:
        Pass the data to HTTP server as a cookie,"name1=value1; name2=value2"
    -c,--cookie-jar <filename>:
        (HTTP) Specify to which file you want curl to write all cookies after a completed operation.
    -d,--data <data>:
        always use post!
        (HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when
        a user has filled in an HTML form and presses the submit button. This will cause curl to pass the data to the
        server using the content-type application/x-www-form-urlencoded.

        curl -d "operator=will" -d "curl=curl" http://localhost:8080/home/mongodb // request method is post

        posting data from a file named 'foobar' would thus be done -d,--data @foobar
    --data-raw:
        similar to -d,--data but without the special interpretation of the @ Character.
    --data-binary:
        HTTP Posts data exactly as specified with no extra processing whatsoever.
        If you start the data with the letter @, the rest should be a filename

    --dns-server <address>:
        Set the list of DNS servers to be used instead of the system default. The list of IP addresses should be
        separated with commas. Port numbers may also optionally be given as :<port-number> after each IP address.
    -D,--dump-header <filename>:
        (HTTP FTP) Write the received protocol headers to the specified file.

        curl --compressed -c cookie -H "cookie: cookie1=will" -D header http://localhost:8080/home/cookie
        cat header
        HTTP/1.1 200
        Set-Cookie: cookie1=will; Path=/home
        Content-Type: application/json;charset=UTF-8
        Transfer-Encoding: chunked
        Date: Thu, 01 Feb 2018 10:16:42 GMT
    -F,--form <name=content>:
        (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        This causes curl to POST data using the Content-Type multipart/form-data

        This enables uploading of binary files etc. To force the 'content' part to be a file, prefix the file name with an @ sign
        To just get the content part from a file, prefix the file name with the symbol <. The difference between @ and < is
        that @ makes a file get attached in the post as a file upload, while the < makes a text field and just get the contents for that text field from a file.

        send an image to an HTTP server:
            curl -F profile=@potrait.jpg http://localhost:8080/upload
            curl -F "profile=@potrait.jpg;type=image/jpeg" http://localhost:8080/upload
    -G,--get:
        When used, this option will make all data specified with -d, --data, --data-binary or --data-urlencode to be
        used in an HTTP GET request instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.

    -I,--head:
        (HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but
        the header of a document. When used on an FTP or FILE file, curl displays the file size and last modification time only.

        curl --head localhost:8080/home/redisNewHash
        HTTP/1.1 400
        Content-Type: application/json;charset=UTF-8
        Transfer-Encoding: chunked
        Date: Thu, 01 Feb 2018 10:31:55 GMT
        Connection: close
    -H,--header <header/@file>
    -i,--include:
        Include the HTTP response headers in the output. The HTTP response headers can include things like server name, cookies, date of the document, HTTP version and more...
    -r,--range range:
        (HTTP FTP SFTP FILE) Retrieve a byte range (i.e a partial document) from a HTTP/1.1, FTP or SFTP server or a local FILE. Ranges can be specified in a number of ways.
        0-499     specifies the first 500 bytes
        -500      specifies the last 500 bytes
        9500-     specifies the bytes from offset 9500 and forward
        100-199,500-599    specifies two separate 100-byte ranges(*) (HTTP)
    -T,--upload-file <file>
        curl -T "{file1,file2}" http://www.uploadtothissite.com
        curl -T "img[1-1000].png" ftp://ftp.picturemania.com/upload/
    -X,--request <method>
    -o,--output


    curl -H "Content-type:application/json;UTF-8" -d '{"userName":"system1","userPwd":"f379eaf3c831b04de153469d1bec345e"}' -i -D header localhost:9000/auth/token
    curl -H "Content-type: application/json;charset=UTF-8" -H "X-AUTH-TOKEN: 31D0A860-D603-413E-B430-20CCA5273E2F" -X POST -i -d '{"orgId":1,"orgName":"一米辅导"}' localhost:9000/biz/workOrder/userListByOrganization
    curl -H "Content-type: application/json;charset=UTF-8" -H "X-AUTH-TOKEN: 31D0A860-D603-413E-B430-20CCA5273E2F" -X POST -i -d '{"userNm":"system1"}' localhost:9000/biz/workOrder/userListByErp
    curl -H "Content-type: application/json;charset=UTF-8" -H "X-AUTH-TOKEN: 31D0A860-D603-413E-B430-20CCA5273E2F" -H "X-AUTH-UID: 104" -X POST -d '{}' localhost:9000/biz/workOrder/organizationList | json_pp



