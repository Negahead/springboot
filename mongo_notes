Insert new Document:
	post={"title":"My blog post","content":"here's my blog post","date":new Date()}
	db.blog.insert(post);
query document:
	db.blog.find()
update document:
	post.comment=[]
	db.blog.update({"title":"My blog post"},post)
delete document:
	db.blog.delete({title:"My blog post"})



Data Types:
	{"x":null}
	{"x":true}
	number,default is 64-bit floating point numbers:
	{"x":3.14}
	or
	{"x":NumberInt("3")}
	{"x":NumberLong("3")}
	string
	{"x":"foobar"}
	date
	{"x":new Date()}
	regular expression
	{"x":/foobar/i}
	array
	{"x":[1,2,3,4,5]}
	object id
	{"x":new ObjectId()}



Modifiers:
	$set:set or create a new field
	    db.foo.update({"name":"joe"},{"$inc":{"comments.0.vote":1}})  # index based
	$unset: remove a field:
		db.foo.update({"name":"joe"},{"$unset":{"favorite book":1}})
		this will delete "favorite book" field
	$inc:increment or decrement
	$push:create or modify an array
	    # this will push the object into it as a whole
		db.foo.update({"name":"joe"},{"$push":{"favorite book":["book1","book2"]}})
		# push as single,namely each:
		db.foo.update({"name":"joe"},{"$push":{"favorite book":{"$each":["Pro git","MySQL Cookbook"]}}})
		# only last 5 numbers,slice is always negative.
		db.foo.update({"name":"joe"},{"$push":{"number":{"$each":[1,2,3,4,5,6,7,8,9,10],"$slice":-5}}})
	$addToSet
	    # add to set do not guarantee a particular ordering of elements in the modified set
	    # if the field is absent,$addToSet will creates the array field
	    # if the field is not an array,operation will fail
	    # if the value is an array,$addToSet will appends the whole array as a single element.you can use $each
	    db.foo.update({"name":"joe"},{"$addToSet":{"number":[100,101]}})
	$rename
	    # rename a field name,if the field does not exist,do nothing
	    db.foo.update("name":"joe"},{"$rename":{"new field":"new_field","number":"my_number"}})
	    db.foo.update({"name":"joe"},{"$rename":{"country.name":"country.country_name"}})


	# difference between addToSet and push:
	    #addToSet do not add the item to the given field if it already contains it,on the other hand,$push
	    will add the given object to the field whether it exists or not!

	$pop
	    # $pop operation will fail if the field is not an array type
	    # pop out the last one,old field is changed
	    db.foo.update({"name":"joe"},{"$pop":{"number":1}})
	    # pop out the first one
	    db.foo.update({"name":"joe"},{"$pop":{"number":-1}})
	$pull: remove element base on specific criteria
	$setOnInsert: only sets the value of a field when the document is being inserted,

upsert
    db.foo.update({"name":"joe"},{"$inc":1},true) # the third argument means this is an upsert query
    db.foo.update({"rep":20},{"inc":{"rep":3}},true),is {"rep":20} does not exist and upsert in not set,
    nothing will happen,but this will create another new document and "rep" is now 23

update multiple Documents:
    update will only update the first document,to modify all of the documents matching the criteria,you can pass true
    as the fourth parameter to update.

    db.foo.update({"number":20},{"info":{"age":22,"country":"USA"}},{"multi":true}})


Query:
    # The positional $ operator acts as a placeholder for the first match of the update query document.
    # you pass a second argument to find specifying the keys you want,> 0 is true,= 0 is false
    db.foo.find({},{"name":1})

    Query Conditionals
    "$lt" <
    "$lte" <=
    "$gt" >
    "$gte" >=
    "$ne" !=
    "$eq" ==
    "$in":selects the documents where the value of a field equals any value in the specified array
        {field:{"$in":[value1,value2,...valueN]}}
    "$nin":the opposite of $in
    db.foo.find({"age":{"$gte":20,"$lte":30}})
    db.foo.find({"registered":{"$gte":new Date(01/01/2017)}})
    db.foo.findOne({"registered":{"$lte":new Date("2017-10-01")}})

    $exist:match documents whether field exists or not based on boolean value
        { field: { $exists: <boolean> } }
    $and:
        {"$and":[{expression1},{expression2},..,]}
    $or
        { $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }
        db.foo.find({"$in":[{"number":{"$in":[7,9}},{"isMarried":"yes"}]})
    $mod
        db.foo.find({"number":{"$mod":[2,1]}})
    $not
        { field: { $not: { <operator-expression> } } }
        {field:{"$not":{expression}}},include those document that do not contains the field,can not apply to regexp
        can be applied on any other criteria
        db.foo.find({"number":{"$not":{"$mod":[2,1]}}})
    db.users.find({"age" : {"$lt" : 30, "$gt" : 20}})
    db.users.find({"$and" : [{"x" : {"$lt" : 1}}, {"x" : 4}]})


Type specific queries:
    db.foo.find("name":null})

regular expressions:
    db.foo.find({"name":/JOE/i})

Query arrays:
    $all
    find all documents with both "apple" and "banana" elements,order does not count.
    db.foo.find({"fruit":{"$all":["apple","banana"]}})

    $size
    db.foo.find({"number":{"$size":7}})

    $slice
    return the first 3 numbers:
    db.foo.findOne({"name":"joe"},{"number":{"$slice":3}})
    offset and length,zero index based
    db.foo.findOne({"name":"joe"},{"number":{"$slice":[2,3]}})
    db.foo.findOne({"name":"joe"},{"number":{"$slice":[-3,2]}}) # starting from last

    array query
    {"X":[5,25]}
    {"x":{"$gt":10,"$lt":20}} will match,match any one of them is return


limits,skip and Sorts
    db.foo.find().limit(2) # upper limit
    db.foo.find().skip(3) # skip the first three matching documents and return the rest of the matches

    # sort takes an object,1 for ascending,-1 for descending
    db.foo.find().sort({"username":1,"age":-1})


Aggregation Framework
    the aggregation framework lets you transform and combine documents in a collection.
    basically you build a pipeline that process a stream of documents through several
    building blocks:filtering,projecting,grouping,sorting,limiting and skipping.
    each result stream only exists in memory and are not written to disk anywhere.


    db.bar.aggregate({"$project":{"name":1}},{"$group":{"_id":"$name","count":{"$sum":1}}},{"$sort":{"count":-1}},{"$limit":1})
    # 1: 1 to include,0 to exclude,by default,"_id" is always returned.
    # 2: after the group there will be one result document per name,so "name" become the unique identifier,it has to be "_id" or error


    db.bar.aggregate({"$project":{"id":"$_id","_id":0}})
    # rename field and leave out _id,the "$fieldname" syntax is used to refer to fieldname's value
    # in the aggregation framework.


    Mathematical expressions:
        db.bar.aggregate({"$project":{"sum":{"$add":["$number",100]}}})

        "$add":[exp1[, exp2,..., expN]]
        "$multiple":[exp1[, exp2,..., expN]]
        "$subtract":[exp1,exp2]
        "$divide":[exp1,exp2]
        "$mod":[exp1,exp2]


    $group
        "$sum":value
        "$avg":value
        "$max":expr
        "$min":expr
        "$first":expr
        "$last":expr

    $unwind
        turns each field of an array into a separate document