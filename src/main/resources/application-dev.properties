# dev profile configuration,this is profile-specific properties files,these have to be
# named in the format application-{profiles}.properties

mybatis.config-location=classpath:mybatis_config.xml

# classpath*:conf/appContext.xml,all classpath resources that match the given name must be obtained
mybatis.mapper-locations=classpath:**/*Mapper.xml

# you can bind these property values into bean properties using @Value:
# @Value("${spring.datasource.druid.url}")
# private String url


# Druid Datasource specific settings
# Spring Boot will automatically generate and configure the dataSource bean based on properties set int the
# application.properties file,So we can directly use:
#       @Autowired
#       private DataSource dataSource;


# spring.datasource.url=jdbc:h2:~/jooq-spring-boot-example
spring.datasource.druid.url=jdbc:mysql://localhost:3306/will?useSSL=false&useUnicode=yes
spring.datasource.druid.username=root
spring.datasource.druid.password=2b172b
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
# List properties
spring.datasource.druid.list-values[0]=foo
spring.datasource.druid.list-values[1]=bar
spring.datasource.druid.list-values[2]=baz

# Map properties
spring.datasource.druid.mapHeaders.movieTitle=Titanic
spring.datasource.druid.mapHeaders.movieDirector=James Cameron

# place the logback.xml file in the root classpath,Spring boot will automatically use it the configure the logging system.
logging.level.com.google = DEBUG
logging.level.org.springframework.web = DEBUG
logging.level.org.springframework.data =DEBUG
logging.file = /home/will/springboot_project/logging/log

app.dbType=MONGO
dbType=MONGO

spring.devtools.restart.trigger-file=classpath:**/AppConfig.java

# true by default,if true,Spring Boot will use the Schema.sql and data.sql files in the root classpath to initialize the database
# In addition to schema.sql,data.sql,Spring Boot will load the schema-${platform}.sql and data-${platform}.sql files if they are
# available in the root classpath to initialize the database.here the platform value is the value of the spring.datasource.platform property,
# which can be hsqldb,h2,oracle,mysql,postgresql,etc
spring.datasource.initialize=true



# mongo database
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=will


# ehcache
spring.cache.ehcache.config=classpath:ehcache.xml

# schedule
fixedDelay.in.milliseconds=3000
# notes about cron expression,these fields are separated by white space.
# name              required                allowed values              allowed special characters
# Seconds           Y                       0-59                        , - * /
# Minutes           Y                       0-59                        , - * /
# Hours             Y                       0-23                        , - * /
# Day of Month      Y                       1-31                        , - * / L W C ?
# Month             Y                       0-11 or JAN-DEC             , - * /
# Day of week       Y                       1-7 or SUN-SAT              , - * / L # C ?
# Year              N                       empty or 1970-2099          , - * /
# *：表示匹配该域的任意值，假如在Minutes域使用*, 即表示每分钟都会触发事件。
# ?: 只能用在DayofMonth和DayofWeek两个域,它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响
#    例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*
# -: 表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次
# /：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着di5分钟触发一次，而25，45等分别触发一次.
# ,: 表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。
# L: 表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。
# #: 用于确定每个月第几个星期几，只能出现在DayofWeek域。例如在4#2，表示某月的第二个星期三。
# W: 表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。W的最近寻找不会跨过月份
cron.expresson=