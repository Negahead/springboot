<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>myproject</artifactId>
    <version>0.0.1-SNAPSHOT</version>


    <!--Inherit defaults from Spring boot
        if any dependency or property in configured in both parent and child POMs with
        different values the the child POM value will be the the priority
        you can also use:
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>1.5.9.RELEASE</version>
            <type>pom</type>
            <scope>import</scope> //the import scope is only used on dependency of type "pom",it
                                  //indicates that the specified POM should be replaced with the dependencies
                                  //in that POM's section
        you only need to specify the Spring Boot version once in the parent module configuration,
        includes the most commonly used plugins.
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.9.RELEASE</version>
    </parent>



    <dependencies>
        <!--
            starter for building com.google.springboot.controller.web,including RESTFul,applications using Spring MVC,use
            tomcat as the default embedded container
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion> <!-- exclude the default log system-->
            </exclusions>
        </dependency>


        <!--
            quickly build Mybatis applications on top of Spring Boot
        -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.1</version>
        </dependency>

        <!--
            mongoDB
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat</groupId>
                    <artifactId>tomcat-jdbc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--
            com.mysql.jdbc.Driver
        -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.44</version>
        </dependency>

        <!--
            org.h2.Driver
        -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>

        <!--
            connection pool
        -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.6</version>
        </dependency>

        <!--
            log4j,now you can add log4j.properties file the root classpath,Spring Boot will automatically use for logging
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!--
            spring boot jooq
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>

        <!--
            JPA Data,we are going to use Repositories,Entities,Hibernate...
            The Java persistence API is a standard technology that allows you to 'map' Objects to re
            relational databases.

            Spring Boot,By default,pulls in tomcat-jdbc-{version}.jar and uses org.apache.tomcat.jdbc.poll.DataSource to configure
            the DataSource Bean.
        -->

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.6</version>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.1</version>
        </dependency>

        <!--
            Ehcache
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>net.sf.ehchche</groupId>-->
            <!--<artifactId>ehcache</artifactId>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>com.alibaba</groupId>-->
            <!--<artifactId>druid</artifactId>-->
            <!--<version>1.1.6</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.mybatis</groupId>-->
            <!--<artifactId>mybatis</artifactId>-->
            <!--<version>3.4.1</version>-->
        <!--</dependency>-->

        <!--
            SqlSessionTemplate is the heart of MyBatis-Spring. It implements SqlSession and is meant to be a drop-in replacement
            for any existing use of SqlSession in your code. SqlSessionTemplate is thread safe and can be shared by multiple DAOs or mappers.
            SqlSessionTemplate should always be used instead of default MyBatis implementation DefaultSqlSession because the template
            can participate in Spring transactions and is thread safe for use by multiple injected mapper classes.
            and one of the primary reasons for using MyBatis-Spring is that it allows MyBatis to participate in Spring transactions.
        -->
        <!--<dependency>-->
            <!--<groupId>org.mybatis</groupId>-->
            <!--<artifactId>mybatis-spring</artifactId>-->
            <!--<version>1.3.0</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- com.mysql.jdbc.Driver  -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>


        <!--
            poi support
        -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.16</version>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.16</version>
        </dependency>

        <!--
            provide additional development-time features,applications that use spring-boot-devtools will automatically
            restart whenever files ON THE CLASSPATH changes.As DevTools monitors classpath resource,the only way to trigger
            a restart is to update the classpath.certain resources such as static assets and view templates do not need
            to restart the application.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!--
                'optional',so this will not be packaged in fat JAR
            -->
            <optional>true</optional>
        </dependency>

        <!--
            the dependency is not required for normal use of the application,
            and is only available for the test compilation and execution phases.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>



    <!--omit this ,after you run mvn package command,java -jar filename.jar will say no main manifest attributes
        this plugin can help you package the project as an executable jar
     -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- remote debug spring boot-->
            <!--<plugin>-->
                <!--<groupId>org.springframework.boot</groupId>-->
                <!--<artifactId>spring-boot-maven-plugin</artifactId>-->
                <!--<configuration>-->
                    <!--<jvmArguments>-->
                        <!-- -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8001-->
                    <!--</jvmArguments>-->
                <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>



    <!--
        compile the project to a specific version
        default inherited from parent is java 1.6

        you can also use:
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    -->
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!--
        mvn package will create .war and .war.original
        instead of .jar and .jar.original
    -->
    <!--<packaging>war</packaging>-->

</project>
